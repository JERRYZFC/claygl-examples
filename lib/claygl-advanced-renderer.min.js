!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("claygl")):"function"==typeof define&&define.amd?define(["claygl"],t):e.ClayAdvancedRenderer=t(e.clay)}(this,function(e){"use strict";function t(e,t){for(var r=0,o=1/t,n=e;n>0;)r+=o*(n%t),n=Math.floor(n/t),o/=t;return r}function r(t){for(var r=new Uint8Array(t*t*4),o=0,n=new e.Vector3,i=0;i<t;i++)for(var a=0;a<t;a++)n.set(2*Math.random()-1,2*Math.random()-1,0).normalize(),r[o++]=255*(.5*n.x+.5),r[o++]=255*(.5*n.y+.5),r[o++]=0,r[o++]=255;return r}function o(t){return new e.Texture2D({pixels:r(t),wrapS:e.Texture.REPEAT,wrapT:e.Texture.REPEAT,width:t,height:t})}function n(e,r,o){var n=new Float32Array(3*e);r=r||0;for(var i=0;i<e;i++){var a=t(i+r,2)*(o?1:2)*Math.PI,s=t(i+r,3)*Math.PI,l=Math.random(),c=Math.cos(a)*Math.sin(s)*l,u=Math.cos(s)*l,p=Math.sin(a)*Math.sin(s)*l;n[3*i]=c,n[3*i+1]=u,n[3*i+2]=p}return n}function i(t){t=t||{},this._ssaoPass=new v({fragment:e.Shader.source("car.ssao.estimate")}),this._blendPass=new v({fragment:e.Shader.source("car.temporalBlend")}),this._blurPass=new v({fragment:e.Shader.source("car.ssao.blur")}),this._framebuffer=new e.FrameBuffer,this._ssaoTexture=new e.Texture2D,this._prevTexture=new e.Texture2D,this._currTexture=new e.Texture2D,this._blurTexture=new e.Texture2D,this._depthTex=t.depthTexture,this._normalTex=t.normalTexture,this._velocityTex=t.velocityTexture,this.setNoiseSize(4),this.setKernelSize(t.kernelSize||12),null!=t.radius&&this.setParameter("radius",t.radius),null!=t.power&&this.setParameter("power",t.power),this._normalTex||(this._ssaoPass.material.disableTexture("normalTex"),this._blurPass.material.disableTexture("normalTex")),this._depthTex||this._blurPass.material.disableTexture("depthTex"),this._blurPass.material.setUniform("normalTex",this._normalTex),this._blurPass.material.setUniform("depthTex",this._depthTex),this._temporalFilter=!0,this._frame=0}function a(t){t=t||{},this._ssrPass=new g({fragment:e.Shader.source("car.ssr.main"),clearColor:[0,0,0,0]}),this._blurPass1=new g({fragment:e.Shader.source("car.ssr.blur"),clearColor:[0,0,0,0]}),this._blurPass2=new g({fragment:e.Shader.source("car.ssr.blur"),clearColor:[0,0,0,0]}),this._blendPass=new g({fragment:e.Shader.source("clay.compositor.blend")}),this._blendPass.material.disableTexturesAll(),this._blendPass.material.enableTexture(["texture1","texture2"]),this._ssrPass.setUniform("gBufferTexture1",t.normalTexture),this._ssrPass.setUniform("gBufferTexture2",t.depthTexture),this._ssrPass.setUniform("gBufferTexture3",t.albedoTexture),this._blurPass1.setUniform("gBufferTexture1",t.normalTexture),this._blurPass1.setUniform("gBufferTexture2",t.depthTexture),this._blurPass2.setUniform("gBufferTexture1",t.normalTexture),this._blurPass2.setUniform("gBufferTexture2",t.depthTexture),this._blurPass2.material.define("fragment","VERTICAL"),this._blurPass2.material.define("fragment","BLEND"),this._ssrTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._texture2=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._texture3=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._prevTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._currentTexture=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._frameBuffer=new e.FrameBuffer({depthBuffer:!1}),this._normalDistribution=null,this._totalSamples=256,this._samplePerFrame=4,this._ssrPass.material.define("fragment","SAMPLE_PER_FRAME",this._samplePerFrame),this._ssrPass.material.define("fragment","TOTAL_SAMPLES",this._totalSamples),this._downScale=1}function s(){this._gBufferPass=new w({renderTransparent:!0,enableTargetTexture3:!1,enableTargetTexture4:!0}),this._compositor=e.createCompositor(P);var t=this._compositor.getNodeByName("source"),r=this._compositor.getNodeByName("coc");this._sourceNode=t,this._cocNode=r,this._compositeNode=this._compositor.getNodeByName("composite"),this._fxaaNode=this._compositor.getNodeByName("FXAA"),this._dofBlurNodes=["dof_blur_far_1","dof_blur_far_2","dof_blur_far_3","dof_blur_far_4","dof_blur_far_final","dof_blur_near_1","dof_blur_near_2","dof_blur_near_3","dof_blur_near_4","dof_blur_near_final"].map(function(e){return this._compositor.getNodeByName(e)},this),this._dofFarFieldNode=this._compositor.getNodeByName("dof_separate_far"),this._dofNearFieldNode=this._compositor.getNodeByName("dof_separate_near"),this._dofCompositeNode=this._compositor.getNodeByName("dof_composite"),this._dofBlurKernel=null,this._dofBlurKernelSize=new Float32Array(0),this._finalNodesChain=A.map(function(e){return this._compositor.getNodeByName(e)},this);var o={normalTexture:this._gBufferPass.getTargetTexture1(),depthTexture:this._gBufferPass.getTargetTexture2(),albedoTexture:this._gBufferPass.getTargetTexture3(),velocityTexture:this._gBufferPass.getTargetTexture4()};this._ssaoPass=new i(o),this._ssrPass=new a(o)}function l(r){r=r||{};for(var o=[],n=0;n<30;n++)o.push([t(n,2),t(n,3)]);this._haltonSequence=o,this._frame=0,this._prevFrameTex=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._outputTex=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._taaPass=new F({fragment:e.Shader.source("car.taa")}),this._velocityTex=r.velocityTexture,this._depthTex=r.depthTexture,this._taaFb=new e.FrameBuffer({depthBuffer:!1}),this._outputPass=new F({fragment:e.Shader.source("clay.compositor.output"),blendWithPrevious:!0}),this._outputPass.material.define("fragment","OUTPUT_ALPHA"),this._outputPass.material.blend=function(e){e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)}}function c(t,r,o){this.renderer=t,this.scene=r,this.preZ=!0,this._compositor=new s,this._temporalSS=new l({velocityTexture:this._compositor.getVelocityTexture(),depthTexture:this._compositor.getDepthTexture()}),o&&(this._shadowMapPass=new E({lightFrustumBias:20})),this._enableTemporalSS="auto",r.on("beforerender",function(e,t,r){this.needsTemporalSS()&&this._temporalSS.jitterProjection(e,r)},this),this._framebuffer=new e.FrameBuffer,this._sourceTex=new e.Texture2D({type:e.Texture.HALF_FLOAT}),this._depthTex=new e.Texture2D({format:e.Texture.DEPTH_COMPONENT,type:e.Texture.UNSIGNED_INT})}function u(e){if(null==e||"object"!=typeof e)return e;var t=e,r=R.call(e);if("[object Array]"===r){if(!_(e)){t=[];for(var o=0,n=e.length;o<n;o++)t[o]=u(e[o])}}else if(z[r]){if(!_(e)){var i=e.constructor;if(e.constructor.from)t=i.from(e);else{t=new i(e.length);for(var o=0,n=e.length;o<n;o++)t[o]=u(e[o])}}}else if(!L[r]&&!_(e)&&!m(e)){t={};for(var a in e)e.hasOwnProperty(a)&&(t[a]=u(e[a]))}return t}function p(e,t,r){if(!f(t)||!f(e))return r?u(t):e;for(var o in t)if(t.hasOwnProperty(o)){var n=e[o],i=t[o];!f(i)||!f(n)||h(i)||h(n)||m(i)||m(n)||d(i)||d(n)||_(i)||_(n)?!r&&o in e||(e[o]=u(t[o],!0)):p(n,i,r)}return e}function h(e){return"[object Array]"===R.call(e)}function f(e){var t=typeof e;return"function"===t||!!e&&"object"==t}function d(e){return!!L[R.call(e)]}function m(e){return"object"==typeof e&&"number"==typeof e.nodeType&&"object"==typeof e.ownerDocument}function _(e){return e[O]}function x(e,t,r,o){o=p({},o),"boolean"==typeof o.shadow&&(o.shadow={enable:o.shadow}),o=p(o,N),this._renderMain=new c(e,t,o.shadow),this._renderMain.setShadow(o.shadow),this._renderMain.setPostEffect(o.postEffect),this._renderMain.setTemporalSuperSampling(o.temporalSuperSampling),this._needsRefresh=!1,this._graphicOpts=o,r.on("frame",this._loop,this),t.on("click",function(e){this.setPostEffect({depthOfField:{focalDistance:e.distance}}),this.render()},this)}var v=e.compositor.Pass;e.Shader.import("@export car.ssao.estimate\n#define SHADER_NAME SSAO\nuniform sampler2D depthTex;\nuniform sampler2D normalTex;\nuniform sampler2D noiseTex;\nuniform vec2 depthTexSize;\nuniform vec2 noiseTexSize;\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 viewInverseTranspose;\nuniform vec3 kernel[KERNEL_SIZE];\nuniform float radius : 1;\nuniform float power : 1;\nuniform float bias: 0.01;\nuniform float intensity: 1.0;\nvarying vec2 v_Texcoord;\nfloat ssaoEstimator(in vec3 originPos, in vec3 N, in mat3 kernelBasis) {\n float occlusion = 0.0;\n for (int i = 0; i < KERNEL_SIZE; i++) {\n vec3 samplePos = kernel[i];\n#ifdef NORMALTEX_ENABLED\n samplePos = kernelBasis * samplePos;\n#endif\n samplePos = samplePos * radius + originPos;\n vec4 texCoord = projection * vec4(samplePos, 1.0);\n texCoord.xy /= texCoord.w;\n texCoord.xy = texCoord.xy * 0.5 + 0.5;\n vec4 depthTexel = texture2D(depthTex, texCoord.xy);\n float z = depthTexel.r * 2.0 - 1.0;\n#ifdef ALCHEMY\n vec4 projectedPos = vec4(texCoord.xy * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n p4.xyz /= p4.w;\n vec3 cDir = p4.xyz - originPos;\n float vv = dot(cDir, cDir);\n float vn = dot(cDir, N);\n float radius2 = radius * radius;\n vn = max(vn + p4.z * bias, 0.0);\n float f = max(radius2 - vv, 0.0) / radius2;\n occlusion += f * f * f * max(vn / (0.01 + vv), 0.0);\n#else\n if (projection[3][3] == 0.0) {\n z = projection[3][2] / (z * projection[2][3] - projection[2][2]);\n }\n else {\n z = (z - projection[3][2]) / projection[2][2];\n }\n float factor = step(samplePos.z, z - bias);\n float rangeCheck = smoothstep(0.0, 1.0, radius / abs(originPos.z - z));\n occlusion += rangeCheck * factor;\n#endif\n }\n#ifdef NORMALTEX_ENABLED\n occlusion = 1.0 - occlusion / float(KERNEL_SIZE);\n#else\n occlusion = 1.0 - clamp((occlusion / float(KERNEL_SIZE) - 0.6) * 2.5, 0.0, 1.0);\n#endif\n return pow(occlusion, power);\n}\nvoid main()\n{\n vec2 uv = v_Texcoord;\n vec4 depthTexel = texture2D(depthTex, uv);\n#ifdef NORMALTEX_ENABLED\n vec2 texelSize = 1.0 / depthTexSize;\n vec4 tex = texture2D(normalTex, uv);\n vec3 r = texture2D(normalTex, uv + vec2(texelSize.x, 0.0)).rgb;\n vec3 l = texture2D(normalTex, uv + vec2(-texelSize.x, 0.0)).rgb;\n vec3 t = texture2D(normalTex, uv + vec2(0.0, -texelSize.y)).rgb;\n vec3 b = texture2D(normalTex, uv + vec2(0.0, texelSize.y)).rgb;\n if (dot(tex.rgb, tex.rgb) == 0.0\n || dot(r, r) == 0.0 || dot(l, l) == 0.0\n || dot(t, t) == 0.0 || dot(b, b) == 0.0\n ) {\n gl_FragColor = vec4(1.0);\n return;\n }\n vec3 N = tex.rgb * 2.0 - 1.0;\n N = (viewInverseTranspose * vec4(N, 0.0)).xyz;\n vec2 noiseTexCoord = depthTexSize / vec2(noiseTexSize) * uv;\n vec3 rvec = texture2D(noiseTex, noiseTexCoord).rgb * 2.0 - 1.0;\n vec3 T = normalize(rvec - N * dot(rvec, N));\n vec3 BT = normalize(cross(N, T));\n mat3 kernelBasis = mat3(T, BT, N);\n#else\n if (depthTexel.r > 0.99999) {\n gl_FragColor = vec4(1.0);\n return;\n }\n mat3 kernelBasis;\n#endif\n float z = depthTexel.r * 2.0 - 1.0;\n vec4 projectedPos = vec4(uv * 2.0 - 1.0, z, 1.0);\n vec4 p4 = projectionInv * projectedPos;\n vec3 position = p4.xyz / p4.w;\n float ao = ssaoEstimator(position, N, kernelBasis);\n ao = clamp(1.0 - (1.0 - ao) * intensity, 0.0, 1.0);\n gl_FragColor = vec4(vec3(ao), 1.0);\n}\n@end\n@export car.ssao.blur\n#define SHADER_NAME SSAO_BLUR\nuniform sampler2D ssaoTexture;\n#ifdef NORMALTEX_ENABLED\nuniform sampler2D normalTex;\n#endif\nvarying vec2 v_Texcoord;\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\nuniform int direction: 0.0;\n#ifdef DEPTHTEX_ENABLED\nuniform sampler2D depthTex;\nuniform mat4 projection;\nuniform float depthRange : 0.05;\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(depthTex, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n#endif\nvoid main()\n{\n float kernel[5];\n kernel[0] = 0.122581;\n kernel[1] = 0.233062;\n kernel[2] = 0.288713;\n kernel[3] = 0.233062;\n kernel[4] = 0.122581;\n vec2 off = vec2(0.0);\n if (direction == 0) {\n off[0] = blurSize / textureSize.x;\n }\n else {\n off[1] = blurSize / textureSize.y;\n }\n vec2 coord = v_Texcoord;\n float sum = 0.0;\n float weightAll = 0.0;\n#ifdef NORMALTEX_ENABLED\n vec3 centerNormal = texture2D(normalTex, v_Texcoord).rgb * 2.0 - 1.0;\n#endif\n#if defined(DEPTHTEX_ENABLED)\n float centerDepth = getLinearDepth(v_Texcoord);\n#endif\n for (int i = 0; i < 5; i++) {\n vec2 coord = clamp(v_Texcoord + vec2(float(i) - 2.0) * off, vec2(0.0), vec2(1.0));\n float w = kernel[i];\n#ifdef NORMALTEX_ENABLED\n vec3 normal = texture2D(normalTex, coord).rgb * 2.0 - 1.0;\n w *= clamp(dot(normal, centerNormal), 0.0, 1.0);\n#endif\n#ifdef DEPTHTEX_ENABLED\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(centerDepth - d) / depthRange, 0.0, 1.0));\n#endif\n weightAll += w;\n sum += texture2D(ssaoTexture, coord).r * w;\n }\n gl_FragColor = vec4(vec3(sum / weightAll), 1.0);\n}\n@end\n"),i.prototype.setDepthTexture=function(e){this._depthTex=e},i.prototype.setNormalTexture=function(e){this._normalTex=e,this._ssaoPass.material[e?"enableTexture":"disableTexture"]("normalTex"),this.setKernelSize(this._kernelSize)},i.prototype.update=function(t,r,o){var n=t.getWidth(),i=t.getHeight(),a=this._ssaoPass,s=this._blurPass,l=this._blendPass;this._frame++,a.setUniform("kernel",this._kernels[(this._temporalFilter?this._frame:o)%this._kernels.length]),a.setUniform("depthTex",this._depthTex),null!=this._normalTex&&a.setUniform("normalTex",this._normalTex),a.setUniform("depthTexSize",[this._depthTex.width,this._depthTex.height]);var c=new e.Matrix4;e.Matrix4.transpose(c,r.worldTransform),a.setUniform("projection",r.projectionMatrix.array),a.setUniform("projectionInv",r.invProjectionMatrix.array),a.setUniform("viewInverseTranspose",c.array);var u=this._ssaoTexture,p=this._blurTexture,h=this._prevTexture,f=this._currTexture;u.width=n,u.height=i,p.width=n,p.height=i,h.width=n,h.height=i,f.width=n,f.height=i,this._framebuffer.attach(u),this._framebuffer.bind(t),t.gl.clearColor(1,1,1,1),t.gl.clear(t.gl.COLOR_BUFFER_BIT),a.render(t),this._temporalFilter&&(this._framebuffer.attach(f),l.setUniform("prevTex",h),l.setUniform("currTex",u),l.setUniform("velocityTex",this._velocityTex),l.render(t)),s.setUniform("textureSize",[n,i]),s.setUniform("projection",r.projectionMatrix.array),this._framebuffer.attach(p),s.setUniform("direction",0),s.setUniform("ssaoTexture",this._temporalFilter?f:u),s.render(t),this._framebuffer.attach(u),s.setUniform("direction",1),s.setUniform("ssaoTexture",p),s.render(t),this._framebuffer.unbind(t);var d=t.clearColor;t.gl.clearColor(d[0],d[1],d[2],d[3]);var m=this._prevTexture;this._prevTexture=this._currTexture,this._currTexture=m},i.prototype.getTargetTexture=function(){return this._ssaoTexture},i.prototype.setParameter=function(e,t){"noiseTexSize"===e?this.setNoiseSize(t):"kernelSize"===e?this.setKernelSize(t):"intensity"===e?this._ssaoPass.material.set("intensity",t):"temporalFilter"===e?this._temporalFilter=t:this._ssaoPass.setUniform(e,t)},i.prototype.setKernelSize=function(e){this._kernelSize=e,this._ssaoPass.material.define("fragment","KERNEL_SIZE",e),this._kernels=this._kernels||[];for(var t=0;t<30;t++)this._kernels[t]=n(e,t*e,!!this._normalTex)},i.prototype.setNoiseSize=function(e){var t=this._ssaoPass.getUniform("noiseTex");t?(t.data=r(e),t.width=t.height=e,t.dirty()):(t=o(e),this._ssaoPass.setUniform("noiseTex",o(e))),this._ssaoPass.setUniform("noiseTexSize",[e,e])},i.prototype.dispose=function(e){this._blurTexture.dispose(e),this._ssaoTexture.dispose(e),this._prevTexture.dispose(e),this._currTexture.dispose(e)},i.prototype.isFinished=function(e){return e>30};var g=e.compositor.Pass,T=e.util.cubemap;e.Shader.import("@export car.ssr.main\n#define SHADER_NAME SSR\n#define MAX_ITERATION 20;\n#define SAMPLE_PER_FRAME 5;\n#define TOTAL_SAMPLES 128;\nuniform sampler2D sourceTexture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform sampler2D gBufferTexture3;\nuniform samplerCube specularCubemap;\nuniform sampler2D brdfLookup;\nuniform float specularIntensity: 1;\nuniform mat4 projection;\nuniform mat4 projectionInv;\nuniform mat4 toViewSpace;\nuniform mat4 toWorldSpace;\nuniform float maxRayDistance: 200;\nuniform float pixelStride: 16;\nuniform float pixelStrideZCutoff: 50;\nuniform float screenEdgeFadeStart: 0.9;\nuniform float eyeFadeStart : 0.2;uniform float eyeFadeEnd: 0.8;\nuniform float minGlossiness: 0.2;uniform float zThicknessThreshold: 1;\nuniform float nearZ;\nuniform vec2 viewportSize : VIEWPORT_SIZE;\nuniform float jitterOffset: 0;\nvarying vec2 v_Texcoord;\n#ifdef DEPTH_DECODE\n@import clay.util.decode_float\n#endif\n#ifdef PHYSICALLY_CORRECT\nuniform sampler2D normalDistribution;\nuniform float sampleOffset: 0;\nuniform vec2 normalDistributionSize;\nvec3 transformNormal(vec3 H, vec3 N) {\n vec3 upVector = N.y > 0.999 ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n vec3 tangentX = normalize(cross(N, upVector));\n vec3 tangentZ = cross(N, tangentX);\n return normalize(tangentX * H.x + N * H.y + tangentZ * H.z);\n}\nvec3 importanceSampleNormalGGX(float i, float roughness, vec3 N) {\n float p = fract((i + sampleOffset) / float(TOTAL_SAMPLES));\n vec3 H = texture2D(normalDistribution,vec2(roughness, p)).rgb;\n return transformNormal(H, N);\n}\nfloat G_Smith(float g, float ndv, float ndl) {\n float roughness = 1.0 - g;\n float k = roughness * roughness / 2.0;\n float G1V = ndv / (ndv * (1.0 - k) + k);\n float G1L = ndl / (ndl * (1.0 - k) + k);\n return G1L * G1V;\n}\nvec3 F_Schlick(float ndv, vec3 spec) {\n return spec + (1.0 - spec) * pow(1.0 - ndv, 5.0);\n}\n#endif\nfloat fetchDepth(sampler2D depthTexture, vec2 uv)\n{\n vec4 depthTexel = texture2D(depthTexture, uv);\n return depthTexel.r * 2.0 - 1.0;\n}\nfloat linearDepth(float depth)\n{\n if (projection[3][3] == 0.0) {\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n }\n else {\n return (depth - projection[3][2]) / projection[2][2];\n }\n}\nbool rayIntersectDepth(float rayZNear, float rayZFar, vec2 hitPixel)\n{\n if (rayZFar > rayZNear)\n {\n float t = rayZFar; rayZFar = rayZNear; rayZNear = t;\n }\n float cameraZ = linearDepth(fetchDepth(gBufferTexture2, hitPixel));\n return rayZFar <= cameraZ && rayZNear >= cameraZ - zThicknessThreshold;\n}\nbool traceScreenSpaceRay(\n vec3 rayOrigin, vec3 rayDir, float jitter,\n out vec2 hitPixel, out vec3 hitPoint, out float iterationCount\n)\n{\n float rayLength = ((rayOrigin.z + rayDir.z * maxRayDistance) > -nearZ)\n ? (-nearZ - rayOrigin.z) / rayDir.z : maxRayDistance;\n vec3 rayEnd = rayOrigin + rayDir * rayLength;\n vec4 H0 = projection * vec4(rayOrigin, 1.0);\n vec4 H1 = projection * vec4(rayEnd, 1.0);\n float k0 = 1.0 / H0.w, k1 = 1.0 / H1.w;\n vec3 Q0 = rayOrigin * k0, Q1 = rayEnd * k1;\n vec2 P0 = (H0.xy * k0 * 0.5 + 0.5) * viewportSize;\n vec2 P1 = (H1.xy * k1 * 0.5 + 0.5) * viewportSize;\n P1 += dot(P1 - P0, P1 - P0) < 0.0001 ? 0.01 : 0.0;\n vec2 delta = P1 - P0;\n bool permute = false;\n if (abs(delta.x) < abs(delta.y)) {\n permute = true;\n delta = delta.yx;\n P0 = P0.yx;\n P1 = P1.yx;\n }\n float stepDir = sign(delta.x);\n float invdx = stepDir / delta.x;\n vec3 dQ = (Q1 - Q0) * invdx;\n float dk = (k1 - k0) * invdx;\n vec2 dP = vec2(stepDir, delta.y * invdx);\n float strideScaler = 1.0 - min(1.0, -rayOrigin.z / pixelStrideZCutoff);\n float pixStride = 1.0 + strideScaler * pixelStride;\n dP *= pixStride; dQ *= pixStride; dk *= pixStride;\n vec4 pqk = vec4(P0, Q0.z, k0);\n vec4 dPQK = vec4(dP, dQ.z, dk);\n pqk += dPQK * jitter;\n float rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n float rayZNear;\n bool intersect = false;\n vec2 texelSize = 1.0 / viewportSize;\n iterationCount = 0.0;\n for (int i = 0; i < MAX_ITERATION; i++)\n {\n pqk += dPQK;\n rayZNear = rayZFar;\n rayZFar = (dPQK.z * 0.5 + pqk.z) / (dPQK.w * 0.5 + pqk.w);\n hitPixel = permute ? pqk.yx : pqk.xy;\n hitPixel *= texelSize;\n intersect = rayIntersectDepth(rayZNear, rayZFar, hitPixel);\n iterationCount += 1.0;\n dPQK *= 1.2;\n if (intersect) {\n break;\n }\n }\n Q0.xy += dQ.xy * iterationCount;\n Q0.z = pqk.z;\n hitPoint = Q0 / pqk.w;\n return intersect;\n}\nfloat calculateAlpha(\n float iterationCount, float reflectivity,\n vec2 hitPixel, vec3 hitPoint, float dist, vec3 rayDir\n)\n{\n float alpha = clamp(reflectivity, 0.0, 1.0);\n alpha *= 1.0 - (iterationCount / float(MAX_ITERATION));\n vec2 hitPixelNDC = hitPixel * 2.0 - 1.0;\n float maxDimension = min(1.0, max(abs(hitPixelNDC.x), abs(hitPixelNDC.y)));\n alpha *= 1.0 - max(0.0, maxDimension - screenEdgeFadeStart) / (1.0 - screenEdgeFadeStart);\n float _eyeFadeStart = eyeFadeStart;\n float _eyeFadeEnd = eyeFadeEnd;\n if (_eyeFadeStart > _eyeFadeEnd) {\n float tmp = _eyeFadeEnd;\n _eyeFadeEnd = _eyeFadeStart;\n _eyeFadeStart = tmp;\n }\n float eyeDir = clamp(rayDir.z, _eyeFadeStart, _eyeFadeEnd);\n alpha *= 1.0 - (eyeDir - _eyeFadeStart) / (_eyeFadeEnd - _eyeFadeStart);\n alpha *= 1.0 - clamp(dist / maxRayDistance, 0.0, 1.0);\n return alpha;\n}\n@import clay.util.rand\n@import clay.util.rgbm\nvoid main()\n{\n vec4 normalAndGloss = texture2D(gBufferTexture1, v_Texcoord);\n if (dot(normalAndGloss.rgb, vec3(1.0)) == 0.0) {\n discard;\n }\n float g = normalAndGloss.a;\n#if !defined(PHYSICALLY_CORRECT)\n if (g <= minGlossiness) {\n discard;\n }\n#endif\n float reflectivity = (g - minGlossiness) / (1.0 - minGlossiness);\n vec3 N = normalize(normalAndGloss.rgb * 2.0 - 1.0);\n N = normalize((toViewSpace * vec4(N, 0.0)).xyz);\n vec4 projectedPos = vec4(v_Texcoord * 2.0 - 1.0, fetchDepth(gBufferTexture2, v_Texcoord), 1.0);\n vec4 pos = projectionInv * projectedPos;\n vec3 rayOrigin = pos.xyz / pos.w;\n vec3 V = -normalize(rayOrigin);\n float ndv = clamp(dot(N, V), 0.0, 1.0);\n float iterationCount;\n float jitter = rand(fract(v_Texcoord + jitterOffset));\n vec4 albedoMetalness = texture2D(gBufferTexture3, v_Texcoord);\n vec3 albedo = albedoMetalness.rgb;\n float m = albedoMetalness.a;\n vec3 diffuseColor = albedo * (1.0 - m);\n vec3 spec = mix(vec3(0.04), albedo, m);\n#ifdef PHYSICALLY_CORRECT\n vec4 color = vec4(vec3(0.0), 1.0);\n float jitter2 = rand(fract(v_Texcoord)) * float(TOTAL_SAMPLES);\n for (int i = 0; i < SAMPLE_PER_FRAME; i++) {\n vec3 H = importanceSampleNormalGGX(float(i) + jitter2, 1.0 - g, N);\n vec3 rayDir = normalize(reflect(-V, H));\n#else\n vec3 rayDir = normalize(reflect(-V, N));\n#endif\n vec2 hitPixel;\n vec3 hitPoint;\n bool intersect = traceScreenSpaceRay(rayOrigin, rayDir, jitter, hitPixel, hitPoint, iterationCount);\n float dist = distance(rayOrigin, hitPoint);\n vec3 hitNormal = texture2D(gBufferTexture1, hitPixel).rgb * 2.0 - 1.0;\n hitNormal = normalize((toViewSpace * vec4(hitNormal, 0.0)).xyz);\n#ifdef PHYSICALLY_CORRECT\n float ndl = clamp(dot(N, rayDir), 0.0, 1.0);\n float vdh = clamp(dot(V, H), 0.0, 1.0);\n float ndh = clamp(dot(N, H), 0.0, 1.0);\n vec3 litTexel = vec3(0.0);\n if (dot(hitNormal, rayDir) < 0.0 && intersect) {\n litTexel = texture2D(sourceTexture, hitPixel).rgb;\n litTexel *= pow(clamp(1.0 - dist / 200.0, 0.0, 1.0), 3.0);\n }\n else {\n#ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n litTexel = RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, 0.0), 8.12).rgb * specularIntensity;\n#endif\n }\n color.rgb += ndl * litTexel * (\n F_Schlick(ndl, spec) * G_Smith(g, ndv, ndl) * vdh / (ndh * ndv + 0.001)\n );\n }\n color.rgb /= float(SAMPLE_PER_FRAME);\n#else\n#if !defined(SPECULARCUBEMAP_ENABLED)\n if (dot(hitNormal, rayDir) >= 0.0) {\n discard;\n }\n if (!intersect) {\n discard;\n }\n#endif\n float alpha = clamp(calculateAlpha(iterationCount, reflectivity, hitPixel, hitPoint, dist, rayDir), 0.0, 1.0);\n vec4 color = texture2D(sourceTexture, hitPixel);\n color.rgb *= alpha;\n#ifdef SPECULARCUBEMAP_ENABLED\n vec3 rayDirW = normalize(toWorldSpace * vec4(rayDir, 0.0)).rgb;\n alpha = alpha * (intersect ? 1.0 : 0.0);\n float bias = (1.0 - g) * 5.0;\n vec2 brdfParam2 = texture2D(brdfLookup, vec2(1.0 - g, ndv)).xy;\n color.rgb += (1.0 - alpha)\n * RGBMDecode(textureCubeLodEXT(specularCubemap, rayDirW, bias), 8.12).rgb\n * (spec * brdfParam2.x + brdfParam2.y)\n * specularIntensity;\n#endif\n#endif\n gl_FragColor = encodeHDR(color);\n}\n@end\n@export car.ssr.blur\nuniform sampler2D texture;\nuniform sampler2D gBufferTexture1;\nuniform sampler2D gBufferTexture2;\nuniform mat4 projection;\nuniform float depthRange : 0.05;\nvarying vec2 v_Texcoord;\nuniform vec2 textureSize;\nuniform float blurSize : 1.0;\n#ifdef BLEND\n #ifdef SSAOTEX_ENABLED\nuniform sampler2D ssaoTex;\n #endif\nuniform sampler2D sourceTexture;\n#endif\nfloat getLinearDepth(vec2 coord)\n{\n float depth = texture2D(gBufferTexture2, coord).r * 2.0 - 1.0;\n return projection[3][2] / (depth * projection[2][3] - projection[2][2]);\n}\n@import clay.util.rgbm\nvoid main()\n{\n @import clay.compositor.kernel.gaussian_9\n vec4 centerNTexel = texture2D(gBufferTexture1, v_Texcoord);\n float g = centerNTexel.a;\n float maxBlurSize = clamp(1.0 - g, 0.0, 1.0) * blurSize;\n#ifdef VERTICAL\n vec2 off = vec2(0.0, maxBlurSize / textureSize.y);\n#else\n vec2 off = vec2(maxBlurSize / textureSize.x, 0.0);\n#endif\n vec2 coord = v_Texcoord;\n vec4 sum = vec4(0.0);\n float weightAll = 0.0;\n vec3 cN = centerNTexel.rgb * 2.0 - 1.0;\n float cD = getLinearDepth(v_Texcoord);\n for (int i = 0; i < 9; i++) {\n vec2 coord = clamp((float(i) - 4.0) * off + v_Texcoord, vec2(0.0), vec2(1.0));\n float w = gaussianKernel[i]\n * clamp(dot(cN, texture2D(gBufferTexture1, coord).rgb * 2.0 - 1.0), 0.0, 1.0);\n float d = getLinearDepth(coord);\n w *= (1.0 - smoothstep(abs(cD - d) / depthRange, 0.0, 1.0));\n weightAll += w;\n sum += decodeHDR(texture2D(texture, coord)) * w;\n }\n#ifdef BLEND\n float aoFactor = 1.0;\n #ifdef SSAOTEX_ENABLED\n aoFactor = texture2D(ssaoTex, v_Texcoord).r;\n #endif\n gl_FragColor = encodeHDR(\n sum / weightAll * aoFactor + decodeHDR(texture2D(sourceTexture, v_Texcoord))\n );\n#else\n gl_FragColor = encodeHDR(sum / weightAll);\n#endif\n}\n@end"),a.prototype.setAmbientCubemap=function(e,t,r){this._ssrPass.material.set("specularCubemap",e),this._ssrPass.material.set("brdfLookup",t),this._ssrPass.material.set("specularIntensity",r);var o=e&&r;this._ssrPass.material[o?"enableTexture":"disableTexture"]("specularCubemap")},a.prototype.update=function(t,r,o,n){var i=t.getWidth(),a=t.getHeight(),s=this._ssrTexture,l=this._texture2,c=this._texture3;s.width=this._prevTexture.width=this._currentTexture.width=i/this._downScale,s.height=this._prevTexture.height=this._currentTexture.height=a/this._downScale,l.width=c.width=i,l.height=c.height=a;var u=this._frameBuffer,p=this._ssrPass,h=this._blurPass1,f=this._blurPass2,d=this._blendPass,m=new e.Matrix4,_=new e.Matrix4;e.Matrix4.transpose(m,r.worldTransform),e.Matrix4.transpose(_,r.viewMatrix),p.setUniform("sourceTexture",o),p.setUniform("projection",r.projectionMatrix.array),p.setUniform("projectionInv",r.invProjectionMatrix.array),p.setUniform("toViewSpace",m.array),p.setUniform("toWorldSpace",_.array),p.setUniform("nearZ",r.near);var x=n/this._totalSamples*this._samplePerFrame;if(p.setUniform("jitterOffset",x),p.setUniform("sampleOffset",n*this._samplePerFrame),h.setUniform("textureSize",[s.width,s.height]),f.setUniform("textureSize",[i,a]),f.setUniform("sourceTexture",o),h.setUniform("projection",r.projectionMatrix.array),f.setUniform("projection",r.projectionMatrix.array),u.attach(s),u.bind(t),p.render(t),this._physicallyCorrect&&(u.attach(this._currentTexture),d.setUniform("texture1",this._prevTexture),d.setUniform("texture2",s),d.material.set({weight1:n>=1?.95:0,weight2:n>=1?.05:1}),d.render(t)),u.attach(l),h.setUniform("texture",this._physicallyCorrect?this._currentTexture:s),h.render(t),u.attach(c),f.setUniform("texture",l),f.render(t),u.unbind(t),this._physicallyCorrect){var v=this._prevTexture;this._prevTexture=this._currentTexture,this._currentTexture=v}},a.prototype.getTargetTexture=function(){return this._texture3},a.prototype.setParameter=function(e,t){"maxIteration"===e?this._ssrPass.material.define("fragment","MAX_ITERATION",t):this._ssrPass.setUniform(e,t)},a.prototype.setPhysicallyCorrect=function(e){e?(this._normalDistribution||(this._normalDistribution=T.generateNormalDistribution(64,this._totalSamples)),this._ssrPass.material.define("fragment","PHYSICALLY_CORRECT"),this._ssrPass.material.set("normalDistribution",this._normalDistribution),this._ssrPass.material.set("normalDistributionSize",[64,this._totalSamples])):this._ssrPass.material.undefine("fragment","PHYSICALLY_CORRECT"),this._physicallyCorrect=e},a.prototype.setSSAOTexture=function(e){var t=this._blurPass2;e?(t.material.enableTexture("ssaoTex"),t.material.set("ssaoTex",e)):t.material.disableTexture("ssaoTex")},a.prototype.isFinished=function(e){return!this._physicallyCorrect||e>this._totalSamples/this._samplePerFrame},a.prototype.dispose=function(e){this._ssrTexture.dispose(e),this._texture2.dispose(e),this._texture3.dispose(e),this._prevTexture.dispose(e),this._currentTexture.dispose(e),this._frameBuffer.dispose(e)};var b={component1:[.014096,-.022658,.055991,.004413,-.020612,-.025574,.019188,0,-.038708,.006957,0,.049223,-.021449,.040468,.018301,.099929,.013015,.050223,.054845,.114689,.042178,.038585,.085769,.09708,.057972,.019812,.102517,.068674,.063647,.005252,.108535,.046643,.064754,0,.109709,.038697,.063647,.005252,.108535,.046643,.057972,.019812,.102517,.068674,.042178,.038585,.085769,.09708,.013015,.050223,.054845,.114689,-.021449,.040468,.018301,.099929,-.038708,.006957,0,.049223,-.020612,-.025574,.019188,0,.014096,-.022658,.055991,.00441],component2:[115e-6,.009116,0,.051147,.005324,.013416,.009311,.075276,.013753,.016519,.024376,.092685,.0247,.017215,.04394,.096591,.036693,.015064,.065375,.084521,.047976,.010684,.085539,.059948,.057015,.00557,.101695,.031254,.062782,.001529,.112002,.008578,.064754,0,.115526,0,.062782,.001529,.112002,.008578,.057015,.00557,.101695,.031254,.047976,.010684,.085539,.059948,.036693,.015064,.065375,.084521,.0247,.017215,.04394,.096591,.013753,.016519,.024376,.092685,.005324,.013416,.009311,.075276,115e-6,.009116,0,.05114]},y={color:{parameters:{width:"expr(width / 1.0 * 1.0)",height:"expr(height / 1.0 * 1.0)",type:"HALF_FLOAT"}}},S={textureSize:"expr( [width / 1.0 * 1.0, height / 1.0 * 1.0] )"},P={type:"compositor",nodes:[{name:"source",type:"texture",outputs:{color:{}}},{name:"source_half",shader:"#source(clay.compositor.downsample)",inputs:{texture:"source"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0, height * 1.0] )"}},{name:"bright",shader:"#source(clay.compositor.bright)",inputs:{texture:"source_half"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{threshold:2,scale:4,textureSize:"expr([width * 1.0 / 2, height / 2])"}},{name:"bright_downsample_4",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 2, height / 2] )"}},{name:"bright_downsample_8",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 4, height / 4] )"}},{name:"bright_downsample_16",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 8, height / 8] )"}},{name:"bright_downsample_32",shader:"#source(clay.compositor.downsample)",inputs:{texture:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 32)",height:"expr(height * 1.0 / 32)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width * 1.0 / 16, height / 16] )"}},{name:"bright_upsample_16_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_32"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{
blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 32, height / 32] )"}},{name:"bright_upsample_16_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_16_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 16)",height:"expr(height * 1.0 / 16)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 32, height * 1.0 / 32] )"}},{name:"bright_upsample_8_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_16"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 16, height * 1.0 / 16] )"}},{name:"bright_upsample_8_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_8_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 16, height * 1.0 / 16] )"}},{name:"bright_upsample_8_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_8_blur_v",texture2:"bright_upsample_16_blur_v"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 8)",height:"expr(height * 1.0 / 8)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_4_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_8"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 8, height * 1.0 / 8] )"}},{name:"bright_upsample_4_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_4_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 8, height * 1.0 / 8] )"}},{name:"bright_upsample_4_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_4_blur_v",texture2:"bright_upsample_8_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 4)",height:"expr(height * 1.0 / 4)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_2_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_downsample_4"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 4, height * 1.0 / 4] )"}},{name:"bright_upsample_2_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_2_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 4, height * 1.0 / 4] )"}},{name:"bright_upsample_2_blend",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_2_blur_v",texture2:"bright_upsample_4_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0 / 2)",height:"expr(height * 1.0 / 2)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"bright_upsample_full_blur_h",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:0,textureSize:"expr( [width * 1.0 / 2, height * 1.0 / 2] )"}},{name:"bright_upsample_full_blur_v",shader:"#source(clay.compositor.gaussian_blur)",inputs:{texture:"bright_upsample_full_blur_h"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{blurSize:1,blurDir:1,textureSize:"expr( [width * 1.0 / 2, height * 1.0 / 2] )"}},{name:"bloom_composite",shader:"#source(clay.compositor.blend)",inputs:{texture1:"bright_upsample_full_blur_v",texture2:"bright_upsample_2_blend"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{weight1:.3,weight2:.7}},{name:"coc",shader:"#source(car.dof.coc)",outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}}},{name:"coc_dilate_1",shader:"#source(car.dof.dilateCoc)",inputs:{cocTex:"coc"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width / 1.0 * 1.0, height / 1.0 * 1.0] )"}},{name:"coc_dilate_2",shader:"#source(car.dof.dilateCoc)",inputs:{cocTex:"coc_dilate_1"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},parameters:{textureSize:"expr( [width / 1.0 * 1.0, height / 1.0 * 1.0] )"},defines:{VERTICAL:null}},{name:"dof_separate_far",shader:"#source(car.dof.separate)",inputs:{mainTex:"source",cocTex:"coc"},outputs:y,defines:{FARFIELD:null}},{name:"dof_separate_near",shader:"#source(car.dof.separate)",inputs:{mainTex:"source",cocTex:"coc"},outputs:y},{name:"dof_blur_far_1",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_far",cocTex:"coc"},outputs:y,parameters:S,defines:{R_PASS:null,FARFIELD:null}},{name:"dof_blur_far_2",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_far",cocTex:"coc"},outputs:y,parameters:S,defines:{G_PASS:null,FARFIELD:null}},{name:"dof_blur_far_3",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_far",cocTex:"coc"},outputs:y,parameters:S,defines:{B_PASS:null,FARFIELD:null}},{name:"dof_blur_far_4",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_far",cocTex:"coc"},outputs:y,parameters:S,defines:{A_PASS:null,FARFIELD:null}},{name:"dof_blur_far_final",shader:"#source(car.dof.blur)",inputs:{rTex:"dof_blur_far_1",gTex:"dof_blur_far_2",bTex:"dof_blur_far_3",aTex:"dof_blur_far_4",cocTex:"coc"},outputs:y,parameters:S,defines:{FINAL_PASS:null,FARFIELD:null}},{name:"dof_blur_near_1",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_near",cocTex:"coc",dilateCocTex:"coc_dilate_2"},outputs:y,parameters:S,defines:{R_PASS:null}},{name:"dof_blur_near_2",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_near",cocTex:"coc",dilateCocTex:"coc_dilate_2"},outputs:y,parameters:S,defines:{G_PASS:null}},{name:"dof_blur_near_3",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_near",cocTex:"coc",dilateCocTex:"coc_dilate_2"},outputs:y,parameters:S,defines:{B_PASS:null}},{name:"dof_blur_near_4",shader:"#source(car.dof.blur)",inputs:{mainTex:"dof_separate_near",cocTex:"coc",dilateCocTex:"coc_dilate_2"},outputs:y,parameters:S,defines:{A_PASS:null}},{name:"dof_blur_near_final",shader:"#source(car.dof.blur)",inputs:{rTex:"dof_blur_near_1",gTex:"dof_blur_near_2",bTex:"dof_blur_near_3",aTex:"dof_blur_near_4",cocTex:"coc",dilateCocTex:"coc_dilate_2"},outputs:y,parameters:S,defines:{FINAL_PASS:null}},{name:"dof_composite",shader:"#source(car.dof.composite)",inputs:{sharpTex:"source",farTex:"dof_blur_far_final",nearTex:"dof_blur_near_final",cocTex:"coc"},outputs:{color:{parameters:{width:"expr(width * 1.0)",height:"expr(height * 1.0)",type:"HALF_FLOAT"}}},defines:{}},{name:"composite",shader:"#source(clay.compositor.hdr.composite)",inputs:{texture:"source",bloom:"bloom_composite"},defines:{}},{name:"FXAA",shader:"#source(clay.compositor.fxaa)",inputs:{texture:"composite"}}]},w=e.deferred.GBuffer;e.Shader.import("@export car.dof.coc\nuniform sampler2D depth;\nuniform float zNear = 0.1;\nuniform float zFar = 2000;\nuniform float focalDistance = 10;\nuniform float focalLength = 50;\nuniform float aperture = 5.6;\nuniform float maxCoc;\nuniform float _filmHeight = 0.024;\nvarying vec2 v_Texcoord;\n@import clay.util.encode_float\nvoid main()\n{\n float z = texture2D(depth, v_Texcoord).r * 2.0 - 1.0;\n float dist = 2.0 * zNear * zFar / (zFar + zNear - z * (zFar - zNear));\n float f = focalLength / 1000.0;\n float s1 = max(f, focalDistance);\n float coeff = f * f / (aperture * (s1 - f) * _filmHeight * 2.0);\n float coc = (dist - focalDistance) * coeff / max(dist, 1e-5);\n coc /= maxCoc;\n gl_FragColor = vec4(clamp(coc * 0.5 + 0.5, 0.0, 1.0), 0.0, 0.0, 1.0);\n}\n@end\n@export car.dof.composite\n#define DEBUG 0\nuniform sampler2D sharpTex;\nuniform sampler2D nearTex;\nuniform sampler2D farTex;\nuniform sampler2D cocTex;\nuniform float maxCoc;\nuniform float minCoc;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nvoid main()\n{\n float coc = texture2D(cocTex, v_Texcoord).r * 2.0 - 1.0;\n vec4 nearTexel = decodeHDR(texture2D(nearTex, v_Texcoord));\n vec4 farTexel = decodeHDR(texture2D(farTex, v_Texcoord));\n vec4 sharpTexel = decodeHDR(texture2D(sharpTex, v_Texcoord));\n float nfa = clamp(nearTexel.a, 0.0, 1.0);\n float ffa = smoothstep(minCoc / maxCoc, 0.2, coc);\n ffa *= clamp(farTexel.a, 0.0, 1.0);\n gl_FragColor.rgb = mix(mix(sharpTexel.rgb, farTexel.rgb, ffa), nearTexel.rgb, nfa);\n gl_FragColor.a = max(max(sharpTexel.a, nfa), clamp(farTexel.a, 0.0, 1.0));\n}\n@end\n@export car.dof.separate\nuniform sampler2D mainTex;\nuniform sampler2D cocTex;\nuniform float minCoc;\nvarying vec2 v_Texcoord;\n@import clay.util.rgbm\nvoid main()\n{\n vec4 color = decodeHDR(texture2D(mainTex, v_Texcoord));\n float coc = texture2D(cocTex, v_Texcoord).r * 2.0 - 1.0;\n#ifdef FARFIELD\n color.a *= step(0.0, coc);\n#else\n color.a *= step(minCoc, -coc);\n#endif\n gl_FragColor = encodeHDR(color);\n}\n@end\n@export car.dof.dilateCoc\n#define SHADER_NAME dilateCoc\nuniform sampler2D cocTex;\nuniform vec2 textureSize;\nvarying vec2 v_Texcoord;\nvoid main()\n{\n#ifdef VERTICAL\n vec2 offset = vec2(0.0, 1.0 / textureSize.y);\n#else\n vec2 offset = vec2(1.0 / textureSize.x, 0.0);\n#endif\n float coc0 = 1.0;\n for (int i = 0; i < 17; i++) {\n vec2 duv = (float(i) - 8.0) * offset * 1.5;\n float coc = texture2D(cocTex, v_Texcoord + duv).r * 2.0 - 1.0;\n coc0 = min(coc0, coc);\n }\n gl_FragColor = vec4(coc0 * 0.5 + 0.5, 0.0, 0.0, 1.0);\n}\n@end\n@export car.dof.blur\n#define KERNEL_SIZE 17\nconst vec2 kernel1Weight = vec2(0.411259,-0.548794);\nconst vec2 kernel2Weight = vec2(0.513282,4.561110);\nuniform vec4 kernel1[KERNEL_SIZE];\nuniform vec4 kernel2[KERNEL_SIZE];\n#ifdef FINAL_PASS\nuniform sampler2D rTex;\nuniform sampler2D gTex;\nuniform sampler2D bTex;\nuniform sampler2D aTex;\n#else\nuniform sampler2D mainTex;\n#endif\nuniform sampler2D cocTex;\nuniform sampler2D dilateCocTex;\nuniform float maxCoc;\nuniform float minCoc;\nuniform vec2 textureSize;\nvarying vec2 v_Texcoord;\nvec2 multComplex(vec2 p, vec2 q)\n{\n return vec2(p.x*q.x-p.y*q.y, p.x*q.y+p.y*q.x);\n}\nfloat GetSmallestCoc(vec2 uv)\n{\n vec2 k = 1.0 / textureSize;\n float coc = texture2D(cocTex, uv).r;\n vec4 around = vec4(\n texture2D(cocTex, uv - k).r,\n texture2D(cocTex, uv + vec2(k.x, -k.y)).r,\n texture2D(cocTex, uv + vec2(-k.x, k.y)).r,\n texture2D(cocTex, uv + k).r\n );\n return min(min(min(min(around.x, around.y), around.z), around.w), coc);\n}\n@import clay.util.rgbm\n@import clay.util.float\nvoid main()\n{\n float halfKernelSize = float(KERNEL_SIZE / 2);\n vec2 texelSize = 1.0 / textureSize;\n float weight = 0.0;\n#ifdef FARFIELD\n float coc0 = texture2D(cocTex, v_Texcoord).r * 2.0 - 1.0;\n#else\n float coc0 = -(texture2D(dilateCocTex, v_Texcoord).r * 2.0 - 1.0);\n#endif\n if (coc0 <= 0.0) {\n gl_FragColor = vec4(0.0);\n return;\n }\n coc0 *= maxCoc;\n#ifdef FINAL_PASS\n vec4 valR = vec4(0.0);\n vec4 valG = vec4(0.0);\n vec4 valB = vec4(0.0);\n vec4 valA = vec4(0.0);\n vec2 offset = vec2(0.0, abs(coc0) / halfKernelSize);\n#else\n vec4 val = vec4(0.0);\n vec2 offset = vec2(texelSize.x / texelSize.y * abs(coc0) / halfKernelSize, 0.0);\n#endif\n for (int i = 0; i < KERNEL_SIZE; i++) {\n vec2 duv = (float(i) - halfKernelSize) * offset;\n float dist = length(duv);\n vec2 uv = clamp(v_Texcoord + duv, vec2(0.0), vec2(1.0));\n#ifdef FARFIELD\n float coc = GetSmallestCoc(uv) * 2.0 - 1.0;\n#else\n float coc = texture2D(cocTex, uv).r * 2.0 - 1.0;\n#endif\n coc *= maxCoc;\n float w = 1.0;\n#ifdef FARFIELD\n w *= step(dist, coc);\n#endif\n weight += w;\n vec4 c0c1 = vec4(kernel1[i].xy, kernel2[i].xy);\n#ifdef FINAL_PASS\n vec4 rTexel = texture2D(rTex, uv) * w;\n vec4 gTexel = texture2D(gTex, uv) * w;\n vec4 bTexel = texture2D(bTex, uv) * w;\n vec4 aTexel = texture2D(aTex, uv) * w;\n valR.xy += multComplex(rTexel.xy,c0c1.xy);\n valR.zw += multComplex(rTexel.zw,c0c1.zw);\n valG.xy += multComplex(gTexel.xy,c0c1.xy);\n valG.zw += multComplex(gTexel.zw,c0c1.zw);\n valB.xy += multComplex(bTexel.xy,c0c1.xy);\n valB.zw += multComplex(bTexel.zw,c0c1.zw);\n valA.xy += multComplex(aTexel.xy,c0c1.xy);\n valA.zw += multComplex(aTexel.zw,c0c1.zw);\n#else\n vec4 color = texture2D(mainTex, uv);\n float tmp;\n #if defined(R_PASS)\n tmp = color.r;\n #elif defined(G_PASS)\n tmp = color.g;\n #elif defined(B_PASS)\n tmp = color.b;\n #elif defined(A_PASS)\n tmp = color.a;\n #endif\n val += tmp * c0c1 * w;\n#endif\n }\n weight /= float(KERNEL_SIZE);\n weight = max(weight, 0.0001);\n#ifdef FINAL_PASS\n valR /= weight;\n valG /= weight;\n valB /= weight;\n valA /= weight;\n float r = dot(valR.xy,kernel1Weight)+dot(valR.zw,kernel2Weight);\n float g = dot(valG.xy,kernel1Weight)+dot(valG.zw,kernel2Weight);\n float b = dot(valB.xy,kernel1Weight)+dot(valB.zw,kernel2Weight);\n float a = dot(valA.xy,kernel1Weight)+dot(valA.zw,kernel2Weight);\n gl_FragColor = vec4(r, g, b, a);\n#else\n val /= weight;\n gl_FragColor = val;\n#endif\n}\n@end"),e.Shader.import("@export car.temporalBlend\nuniform sampler2D prevTex;\nuniform sampler2D currTex;\nuniform sampler2D velocityTex;\nuniform float stillBlending = 0.95;\nuniform float motionBlending = 0.5;\nvarying vec2 v_Texcoord;\nvoid main() {\n vec4 vel = texture2D(velocityTex, v_Texcoord);\n vec2 motion = vel.rg - 0.5;\n vec4 curr = texture2D(currTex, v_Texcoord);\n vec4 prev = texture2D(prevTex, v_Texcoord - motion);\n if (vel.a < 0.01) {\n gl_FragColor = curr;\n }\n else {\n float motionLength = length(motion);\n float weight = clamp(\n mix(stillBlending, motionBlending, motionLength * 1000.0),\n motionBlending, stillBlending\n );\n gl_FragColor = mix(curr, prev, weight);\n }\n}\n@end");var D={color:{parameters:{width:function(e){return e.getWidth()},height:function(e){return e.getHeight()}}}},A=["composite","FXAA"];s.prototype.resize=function(e,t,r){r=r||1,e*=r,t*=r,this._gBufferPass.resize(e,t)},s.prototype._ifRenderNormalPass=function(){return!0},s.prototype._getPrevNode=function(e){for(var t=A.indexOf(e.name)-1,r=this._finalNodesChain[t];r&&!this._compositor.getNodeByName(r.name);)t-=1,r=this._finalNodesChain[t];return r},s.prototype._getNextNode=function(e){for(var t=A.indexOf(e.name)+1,r=this._finalNodesChain[t];r&&!this._compositor.getNodeByName(r.name);)t+=1,r=this._finalNodesChain[t];return r},s.prototype._addChainNode=function(e){var t=this._getPrevNode(e),r=this._getNextNode(e);t&&(t.outputs=D,e.inputs.texture=t.name,r?(e.outputs=D,r.inputs.texture=e.name):e.outputs=null,this._compositor.addNode(e))},s.prototype._removeChainNode=function(e){var t=this._getPrevNode(e),r=this._getNextNode(e);t&&(r?(t.outputs=D,r.inputs.texture=t.name):t.outputs=null,this._compositor.removeNode(e))},s.prototype.updateGBuffer=function(e,t,r,o){this._ifRenderNormalPass()&&this._gBufferPass.update(e,t,r)},s.prototype.updateSSAO=function(e,t,r,o){this._ssaoPass.update(e,r,o)},s.prototype.updateSSR=function(e,t,r,o,n){this._ssrPass.setSSAOTexture(this._enableSSAO?this._ssaoPass.getTargetTexture():null);for(var i=t.getLights(),a=0;a<i.length;a++)i[a].cubemap&&this._ssrPass.setAmbientCubemap(i[a].cubemap,i[a]._brdfLookup,i[a].intensity);this._ssrPass.update(e,r,o,n)},s.prototype.enableSSAO=function(){this._enableSSAO=!0},s.prototype.disableSSAO=function(){this._enableSSAO=!1},s.prototype.enableVelocityBuffer=function(){this._gBufferPass.enableTargetTexture4=!0},s.prototype.disableVelocityBuffer=function(){this._gBufferPass.enableTargetTexture4=!1},s.prototype.enableSSR=function(){this._enableSSR=!0,this._gBufferPass.enableTargetTexture3=!0},s.prototype.disableSSR=function(){this._enableSSR=!1,this._gBufferPass.enableTargetTexture3=!1},s.prototype.getSSAOTexture=function(){return this._ssaoPass.getTargetTexture()},s.prototype.getSSRTexture=function(){return this._ssrPass.getTargetTexture()},s.prototype.getVelocityTexture=function(){return this._gBufferPass.getTargetTexture4()},s.prototype.getDepthTexture=function(){return this._gBufferPass.getTargetTexture2()},s.prototype.disableFXAA=function(){this._removeChainNode(this._fxaaNode)},s.prototype.enableFXAA=function(){this._addChainNode(this._fxaaNode)},s.prototype.enableBloom=function(){this._compositeNode.inputs.bloom="bloom_composite",this._compositor.dirty()},s.prototype.disableBloom=function(){this._compositeNode.inputs.bloom=null,this._compositor.dirty()},s.prototype.enableDOF=function(){this._compositeNode.inputs.texture="dof_composite",this._compositor.dirty()},s.prototype.disableDOF=function(){this._compositeNode.inputs.texture="source",this._compositor.dirty()},s.prototype.enableColorCorrection=function(){this._compositeNode.define("COLOR_CORRECTION"),this._enableColorCorrection=!0},s.prototype.disableColorCorrection=function(){this._compositeNode.undefine("COLOR_CORRECTION"),this._enableColorCorrection=!1},s.prototype.enableEdge=function(){this._enableEdge=!0},s.prototype.disableEdge=function(){this._enableEdge=!1},s.prototype.setBloomIntensity=function(e){null!=e&&this._compositeNode.setParameter("bloomIntensity",e)},s.prototype.setSSAOParameter=function(e,t){if(null!=t)switch(e){case"quality":var r={low:6,medium:12,high:32,ultra:62}[t]||12;this._ssaoPass.setParameter("kernelSize",r);break;case"radius":this._ssaoPass.setParameter(e,t),this._ssaoPass.setParameter("bias",t/50);break;case"intensity":case"temporalFilter":this._ssaoPass.setParameter(e,t)}},s.prototype.setDOFParameter=function(e,t){if(null!=t)switch(e){case"focalDistance":case"focalRange":case"aperture":this._cocNode.setParameter(e,t);break;case"blurRadius":this._dofBlurRadius=t}},s.prototype.setSSRParameter=function(e,t){if(null!=t)switch(e){case"quality":var r={low:10,medium:15,high:30,ultra:80}[t]||20,o={low:32,medium:16,high:8,ultra:4}[t]||16;this._ssrPass.setParameter("maxIteration",r),this._ssrPass.setParameter("pixelStride",o);break;case"maxRoughness":this._ssrPass.setParameter("minGlossiness",Math.max(Math.min(1-t,1),0));break;case"physical":this.setPhysicallyCorrectSSR(t);break;default:console.warn("Unkown SSR parameter "+e)}},s.prototype.setPhysicallyCorrectSSR=function(e){this._ssrPass.setPhysicallyCorrect(e)},s.prototype.setEdgeColor=function(e){},s.prototype.setExposure=function(e){null!=e&&this._compositeNode.setParameter("exposure",Math.pow(2,e))},s.prototype.setColorLookupTexture=function(e,t){},s.prototype.setColorCorrection=function(e,t){this._compositeNode.setParameter(e,t)},s.prototype.composite=function(e,t,r,o,n,i){this._sourceNode.texture=o,this._cocNode.setParameter("depth",n);var a=this._dofBlurRadius||10;a/=e.getHeight();for(var s=1/e.getHeight(),l=0;l<this._dofBlurNodes.length;l++){var c=this._dofBlurNodes[l];c.setParameter("kernel1",b.component1),c.setParameter("kernel2",b.component2),c.setParameter("maxCoc",a),c.setParameter("minCoc",s)}this._cocNode.setParameter("maxCoc",a),this._dofCompositeNode.setParameter("maxCoc",a),this._dofCompositeNode.setParameter("minCoc",s),this._dofFarFieldNode.setParameter("minCoc",s/a),this._dofNearFieldNode.setParameter("minCoc",s/a),this._cocNode.setParameter("zNear",r.near),this._cocNode.setParameter("zFar",r.far),this._compositor.render(e)},s.prototype.isSSRFinished=function(e){return!this._ssrPass||this._ssrPass.isFinished(e)},s.prototype.isSSAOFinished=function(e){return!this._ssaoPass||this._ssaoPass.isFinished(e)},s.prototype.isSSREnabled=function(){return this._enableSSR},s.prototype.dispose=function(e){this._compositor.dispose(e),this._gBufferPass.dispose(e),this._ssaoPass.dispose(e)};var F=e.compositor.Pass;e.Shader.import("@export car.taa\n#define SHADER_NAME TAA3\nuniform sampler2D prevTex;\nuniform sampler2D currTex;\nuniform sampler2D velocityTex;\nuniform sampler2D depthTex;\nuniform vec2 texelSize;\nuniform vec2 velocityTexelSize;\nuniform vec2 jitterOffset;\nuniform bool still;\nuniform float stillBlending = 0.95;\nuniform float motionBlending = 0.85;\nuniform float sharpness = 0.25;\nuniform float motionAmplification = 6000;\nvarying vec2 v_Texcoord;\nfloat Luminance(vec4 color)\n{\n return dot(color.rgb, vec3(0.2125, 0.7154, 0.0721));\n}\nfloat compareDepth(float a, float b)\n{\n return step(a, b);\n}\nvec2 GetClosestFragment(vec2 uv)\n{\n vec2 k = velocityTexelSize.xy;\n vec4 neighborhood = vec4(\n texture2D(depthTex, uv - k).r,\n texture2D(depthTex, uv + vec2(k.x, -k.y)).r,\n texture2D(depthTex, uv + vec2(-k.x, k.y)).r,\n texture2D(depthTex, uv + k).r\n );\n vec3 result = vec3(0.0, 0.0, texture2D(depthTex, uv));\n result = mix(result, vec3(-1.0, -1.0, neighborhood.x), compareDepth(neighborhood.x, result.z));\n result = mix(result, vec3( 1.0, -1.0, neighborhood.y), compareDepth(neighborhood.y, result.z));\n result = mix(result, vec3(-1.0, 1.0, neighborhood.z), compareDepth(neighborhood.z, result.z));\n result = mix(result, vec3( 1.0, 1.0, neighborhood.w), compareDepth(neighborhood.w, result.z));\n return (uv + result.xy * k);\n}\nvec4 ClipToAABB(vec4 color, vec3 minimum, vec3 maximum)\n{\n vec3 center = 0.5 * (maximum + minimum);\n vec3 extents = 0.5 * (maximum - minimum);\n vec3 offset = color.rgb - center;\n vec3 ts = abs(extents / (offset + 0.0001));\n float t = clamp(min(min(ts.x, ts.y), ts.z), 0.0, 1.0);\n color.rgb = center + offset * t;\n return color;\n}\nvec4 Tonemap(vec4 color)\n{\n return vec4(color.rgb / (Luminance(color) + 1.0), color.a);\n}\nvec4 Untonemap(vec4 color)\n{\n return vec4(color.rgb / max(1.0 - Luminance(color), 0.0001), color.a);\n}\nvoid main()\n{\n vec2 closest = GetClosestFragment(v_Texcoord);\n vec4 motionTexel = texture2D(velocityTex, closest);\n if (still) {\n gl_FragColor = Untonemap(\n mix(\n Tonemap(texture2D(currTex, v_Texcoord)),\n Tonemap(texture2D(prevTex, v_Texcoord)),\n stillBlending\n )\n );\n return;\n }\n if (motionTexel.a < 0.1) {\n gl_FragColor = texture2D(currTex, v_Texcoord);\n return;\n }\n vec2 motion = motionTexel.rg - 0.5;\n vec2 k = texelSize.xy;\n vec2 uv = v_Texcoord;\n vec4 color = texture2D(currTex, uv);\n vec4 topLeft = texture2D(currTex, uv - k * 0.5);\n vec4 bottomRight = texture2D(currTex, uv + k * 0.5);\n vec4 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;\n vec4 average = (corners + color) * 0.142857;\n vec4 history = texture2D(prevTex, v_Texcoord - motion);\n float motionLength = length(motion);\n vec2 luma = vec2(Luminance(average), Luminance(color));\n float nudge = mix(4.0, 0.25, clamp(motionLength * 100.0, 0.0, 1.0)) * abs(luma.x - luma.y);\n vec4 minimum = min(bottomRight, topLeft) - nudge;\n vec4 maximum = max(topLeft, bottomRight) + nudge;\n history = ClipToAABB(history, minimum.xyz, maximum.xyz);\n float weight = clamp(\n mix(stillBlending, motionBlending, motionLength * motionAmplification),\n motionBlending, stillBlending\n );\n color = mix(Tonemap(color), Tonemap(history), weight);\n color = Untonemap(clamp(color, 0.0, 1.0));\n gl_FragColor = color;\n}\n@end"),l.prototype={constructor:l,jitterProjection:function(t,r){var o=this._haltonSequence[this._frame%this._haltonSequence.length],n=t.viewport,i=n.devicePixelRatio||t.getDevicePixelRatio(),a=n.width*i,s=n.height*i,l=new e.Matrix4;l.array[12]=(2*o[0]-1)/a,l.array[13]=(2*o[1]-1)/s,e.Matrix4.mul(r.projectionMatrix,l,r.projectionMatrix),e.Matrix4.invert(r.invProjectionMatrix,r.projectionMatrix)},getJitterOffset:function(e){var t=this._haltonSequence[this._frame%this._haltonSequence.length],r=e.viewport,o=r.devicePixelRatio||e.getDevicePixelRatio(),n=r.width*o,i=r.height*o;return[t[0]/n,t[1]/i]},resetFrame:function(){this._frame=0},getFrame:function(){return this._frame},getTargetTexture:function(){return this._prevFrameTex},resize:function(e,t){this._prevFrameTex.width=e,this._prevFrameTex.height=t,this._outputTex.width=e,this._outputTex.height=t},isFinished:function(){return this._frame>=this._haltonSequence.length},render:function(e,t,r,o,n){var i=this._taaPass;i.setUniform("jitterOffset",this.getJitterOffset(e)),i.setUniform("velocityTex",this._velocityTex),i.setUniform("prevTex",this._prevFrameTex),i.setUniform("currTex",r),i.setUniform("depthTex",this._depthTex),i.setUniform("texelSize",[1/r.width,1/r.height]),i.setUniform("velocityTexelSize",[1/this._depthTex.width,1/this._depthTex.height]),i.setUniform("still",!!o),o&&i.setUniform("stillBlending",0===this._frame?0:.95),this._taaFb.attach(this._outputTex),this._taaFb.bind(e),i.render(e),this._taaFb.unbind(e),n&&(this._outputPass.setUniform("texture",this._outputTex),this._outputPass.render(e));var a=this._prevFrameTex;this._prevFrameTex=this._outputTex,this._outputTex=a,this._frame++},dispose:function(e){this._taaFb.dispose(e),this._prevFrameTex.dispose(e),this._outputTex.dispose(e),this._outputPass.dispose(e),this._taaPass.dispose(e)}};var E=e.prePass.ShadowMap,C=new e.Vector2;c.prototype.castRay=function(e,t,r){var o=this.layer.renderer,n=o.viewport;return o.viewport=this.viewport,o.screenToNDC(e,t,C),this.camera.castRay(C,r),o.viewport=n,r},c.prototype.prepareRender=function(){var e=this.scene,t=e.getMainCamera(),r=this.renderer;t.aspect=r.getViewportAspect(),e.update(),e.updateLights();var o=e.updateRenderList(t);this._updateSRGBOfList(o.opaque),this._updateSRGBOfList(o.transparent),this._frame=0,this._temporalSupportDynamic||this._temporalSS.resetFrame();for(var n=e.getLights(),i=0;i<n.length;i++)n[i].cubemap&&(this._compositor&&this._compositor.isSSREnabled()?n[i].invisible=!0:n[i].invisible=!1);this._enablePostEffect&&this._compositor.resize(r.getWidth(),r.getHeight(),r.getDevicePixelRatio()),this._temporalSS&&this._temporalSS.resize(r.getWidth(),r.getHeight())},c.prototype.render=function(e){var t=this.scene,r=t.getMainCamera();this._doRender(t,r,e,this._frame),this._frame++},c.prototype.needsAccumulate=function(){return this.needsTemporalSS()},c.prototype.needsTemporalSS=function(){var e=this._enableTemporalSS;return"auto"===e&&(e=this._enablePostEffect),e},c.prototype.hasDOF=function(){return this._enableDOF},c.prototype.isAccumulateFinished=function(){var e=this._frame;return!(this.needsTemporalSS()&&!this._temporalSS.isFinished(e)||this._compositor&&!this._compositor.isSSAOFinished(e)||this._compositor&&!this._compositor.isSSRFinished(e)||this._compositor&&e<30)},c.prototype._doRender=function(t,r,o,n){var i=this.renderer;n=n||0,!o&&this._shadowMapPass&&(this._shadowMapPass.kernelPCF=this._pcfKernels[0],this._shadowMapPass.render(i,t,r,!0)),this._updateShadowPCFKernel(t,r,n),i.gl.clearColor(0,0,0,0),this._enablePostEffect&&(this.needsTemporalSS()&&this._temporalSS.jitterProjection(i,r),this._compositor.updateGBuffer(i,t,r,this._temporalSS.getFrame())),this._updateSSAO(i,t,r,o?this._temporalSS.getFrame():0);var a,s=this.needsTemporalSS()&&(this._temporalSupportDynamic||o),l=this._enablePostEffect;if(s||l){var c=this._compositor.isSSREnabled(),u=this._sourceTex,p=this._depthTex,a=this._framebuffer;if(p.width=u.width=i.getWidth(),p.height=u.height=i.getHeight(),a.attach(u),a.attach(p,e.FrameBuffer.DEPTH_ATTACHMENT),a.bind(i),i.gl.clear(i.gl.DEPTH_BUFFER_BIT|i.gl.COLOR_BUFFER_BIT),i.render(t,r,!0,this.preZ),this.afterRenderScene(i,t,r),a.unbind(i),c&&l&&(this._compositor.updateSSR(i,t,r,u,this._temporalSS.getFrame()),u=this._compositor.getSSRTexture()),s){var h=!l;this._temporalSS.render(i,r,u,o,h),u=this._temporalSS.getTargetTexture()}l&&this._compositor.composite(i,t,r,u,p,s?this._temporalSS.getFrame():0,o)}else i.render(t,r,!0,this.preZ),this.afterRenderScene(i,t,r);this.afterRenderAll(i,t,r)},c.prototype._updateSRGBOfList=function(e){for(var t=this.isLinearSpace(),r=0;r<e.length;r++)e[r].material[t?"define":"undefine"]("fragment","SRGB_DECODE")},c.prototype.afterRenderScene=function(e,t,r){},c.prototype.afterRenderAll=function(e,t,r){},c.prototype._updateSSAO=function(e,t,r,o){function n(e){for(var t=0;t<e.length;t++){var r=e[t];r.material[i?"enableTexture":"disableTexture"]("ssaoMap"),i&&r.material.set("ssaoMap",a.getSSAOTexture())}}var i=this._enableSSAO&&this._enablePostEffect,a=this._compositor;i&&this._compositor.updateSSAO(e,t,r,this._temporalSS.getFrame()),n(t.getRenderList(r).opaque),n(t.getRenderList(r).transparent)},c.prototype._updateShadowPCFKernel=function(e,t,r){function o(e){for(var t=0;t<e.length;t++)e[t].receiveShadow&&(e[t].material.set("pcfKernel",n),e[t].material&&e[t].material.define("fragment","PCF_KERNEL_SIZE",n.length/2))}var n=this._pcfKernels[r%this._pcfKernels.length];o(e.getRenderList(t).opaque),o(e.getRenderList(t).transparent)},c.prototype.dispose=function(){var e=this.renderer;this._compositor.dispose(e),this._temporalSS.dispose(e),this._shadowMapPass&&this._shadowMapPass.dispose(e),e.dispose()},c.prototype.setPostEffect=function(e,t){var r=this._compositor;e=e||{},this._enablePostEffect=!!e.enable;var o=e.bloom||{},n=e.edge||{},i=e.depthOfField||{},a=e.screenSpaceAmbientOcclusion||{},s=e.screenSpaceReflection||{},l=e.FXAA||{},c=e.colorCorrection||{};o.enable?r.enableBloom():r.disableBloom(),i.enable?r.enableDOF():r.disableDOF(),s.enable?r.enableSSR():r.disableSSR(),c.enable?r.enableColorCorrection():r.disableColorCorrection(),n.enable?r.enableEdge():r.disableEdge(),l.enable?r.enableFXAA():r.disableFXAA(),this._enableDOF=i.enable,this._enableSSAO=a.enable,this._enableSSAO?r.enableSSAO():r.disableSSAO(),r.setBloomIntensity(o.intensity),r.setEdgeColor(n.color),r.setColorLookupTexture(c.lookupTexture,t),r.setExposure(c.exposure),["radius","quality","intensity","temporalFilter"].forEach(function(e){r.setSSAOParameter(e,a[e])}),["quality","maxRoughness","physical"].forEach(function(e){r.setSSRParameter(e,s[e])}),["quality","focalDistance","focalRange","blurRadius","aperture"].forEach(function(e){r.setDOFParameter(e,i[e])}),["brightness","contrast","saturation"].forEach(function(e){r.setColorCorrection(e,c[e])})},c.prototype.setShadow=function(e){for(var r=[],o=0,n=0;n<30;n++){for(var i=[],a=0;a<e.kernelSize;a++)i.push((2*t(o,2)-1)*e.blurSize),i.push((2*t(o,3)-1)*e.blurSize),o++;r.push(i)}this._pcfKernels=r},c.prototype.isDOFEnabled=function(){return this._enablePostEffect&&this._enableDOF},c.prototype.setDOFFocusOnPoint=function(e){if(this._enablePostEffect){if(e>this.camera.far||e<this.camera.near)return;return this._compositor.setDOFParameter("focalDistance",e),!0}},c.prototype.setTemporalSuperSampling=function(e){e=e||{},this._enableTemporalSS=e.enable,this._temporalSupportDynamic=e.dynamic,this._enableTemporalSS&&this._temporalSupportDynamic?this._compositor.enableVelocityBuffer():this._compositor.disableVelocityBuffer()},c.prototype.isLinearSpace=function(){return this._enablePostEffect};var N={shadow:{enable:!0,kernelSize:6,blurSize:2},temporalSuperSampling:{dynamic:!0,enable:"auto"},postEffect:{enable:!0,bloom:{enable:!0,intensity:.1},depthOfField:{enable:!1,focalDistance:5,focalRange:1,blurRadius:20,aperture:5.6,quality:"medium"},screenSpaceAmbientOcclusion:{enable:!1,radius:.2,quality:"medium",intensity:1,temporalFilter:!1},screenSpaceReflection:{enable:!1,physical:!1,quality:"medium",maxRoughness:.8},colorCorrection:{enable:!0,exposure:0,brightness:0,contrast:1,saturation:1,lookupTexture:""},FXAA:{enable:!1}}},L={"[object Function]":1,"[object RegExp]":1,"[object Date]":1,"[object Error]":1,"[object CanvasGradient]":1,"[object CanvasPattern]":1,"[object Image]":1,"[object Canvas]":1},z={"[object Int8Array]":1,"[object Uint8Array]":1,"[object Uint8ClampedArray]":1,"[object Int16Array]":1,"[object Uint16Array]":1,"[object Int32Array]":1,"[object Uint32Array]":1,"[object Float32Array]":1,"[object Float64Array]":1},R=Object.prototype.toString,O="__ec_primitive__"
;x.prototype.render=function(e){this._needsRefresh=!0},x.prototype.setPostEffect=function(e){p(this._graphicOpts.postEffect,e,!0),this._renderMain.setPostEffect(this._graphicOpts.postEffect)},x.prototype.setShadow=function(e){p(this._graphicOpts.shadow,e,!0),this._renderMain.setShadow(this._graphicOpts.shadow)},x.prototype._loop=function(e){this._disposed||this._needsRefresh&&(this._needsRefresh=!1,this._renderMain.prepareRender(),this._renderMain.render(),this._startAccumulating())};var B=1;return x.prototype._stopAccumulating=function(){this._accumulatingId=0,clearTimeout(this._accumulatingTimeout)},x.prototype._startAccumulating=function(e){function t(n){if(r._accumulatingId&&n===r._accumulatingId&&!r._disposed){r._renderMain.isAccumulateFinished()&&o||(r._renderMain.render(!0),e?t(n):requestAnimationFrame(function(){t(n)}))}}var r=this;this._stopAccumulating();var o=r._renderMain.needsAccumulate();o&&(this._accumulatingId=B++,e?t(r._accumulatingId):this._accumulatingTimeout=setTimeout(function(){t(r._accumulatingId)},50))},x.prototype.dispose=function(){this._disposed=!0,this._renderMain.dispose()},x.version="0.1.1",x});
